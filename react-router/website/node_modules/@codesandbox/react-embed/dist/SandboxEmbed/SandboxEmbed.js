"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
exports.__esModule = true;
var React = require("react");
// Replace this with the library later
var CodeSandboxer_1 = require("../react-codesandboxer/CodeSandboxer");
var SandboxEmbed = (function (_super) {
    __extends(SandboxEmbed, _super);
    function SandboxEmbed() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            sandboxId: null,
            oldSandboxId: null,
            error: null
        };
        _this.newSandboxTimeout = null;
        _this.generateEmbedURL = function (sandboxId) {
            var url = "https://codesandbox.io/embed/" + sandboxId;
            function getValue(option, value) {
                if (typeof value === 'boolean') {
                    return value ? 1 : 0;
                }
                if (option === 'highlights') {
                    return value.join(',');
                }
                return value;
            }
            var _a = _this.props.embedOptions, embedOptions = _a === void 0 ? {} : _a;
            embedOptions.module = embedOptions.module || '/example.js';
            var options = Object.keys(embedOptions)
                .map(function (option) { return option + "=" + getValue(option, embedOptions[option]); })
                .join('&');
            if (options) {
                url += "?" + options;
            }
            return url;
        };
        _this.afterDeploy = function (sandboxUrl, sandboxId) {
            _this.setState({ sandboxId: sandboxId, oldSandBoxId: null, error: null });
            if (_this.props.sandboxOptions && _this.props.sandboxOptions.afterDeploy) {
                _this.props.sandboxOptions.afterDeploy(sandboxUrl, sandboxId);
            }
        };
        _this.onLoadComplete = function (params) {
            if (params.error) {
                _this.setState({ sandboxId: null, error: params.error });
            }
            if (_this.props.sandboxOptions && _this.props.sandboxOptions.onLoadComplete) {
                _this.props.sandboxOptions.onLoadComplete(params);
            }
        };
        return _this;
    }
    SandboxEmbed.prototype.componentWillUpdate = function (nextProps) {
        var _this = this;
        if (nextProps.sandboxOptions !== this.props.sandboxOptions) {
            // This will help smoothen the transition between two sandboxes
            this.setState({
                sandboxId: null,
                oldSandboxId: this.state.sandboxId,
                error: null
            });
            this.newSandboxTimeout = setTimeout(function () {
                _this.setState({
                    oldSandboxId: null
                });
            }, 600);
        }
    };
    SandboxEmbed.prototype.componentWillUnmount = function () {
        clearTimeout(this.newSandboxTimeout);
    };
    SandboxEmbed.prototype.render = function () {
        var _this = this;
        var _a = this.props.style, style = _a === void 0 ? {
            width: this.props.width == null ? '100%' : this.props.width,
            height: this.props.height == null ? 500 : this.props.height,
            outline: 0,
            border: 0,
            borderRadius: 4
        } : _a;
        if (this.state.error) {
            return this.props.renderError ? (this.props.renderError(this.state.error)) : (React.createElement("div", { style: this.props.style },
                "Something went wrong while fetching the sandbox:",
                ' ',
                this.state.error.message));
        }
        var usedSandboxId = this.state.sandboxId || this.state.oldSandboxId;
        return (React.createElement(React.Fragment, null,
            usedSandboxId && (React.createElement("iframe", { name: "codesandbox", style: style, src: this.generateEmbedURL(usedSandboxId) })),
            !this.state.sandboxId && (React.createElement(CodeSandboxer_1["default"], __assign({}, this.props.sandboxOptions, { autoDeploy: true, skipRedirect: true, afterDeploy: this.afterDeploy, onLoadComplete: this.onLoadComplete }), function () {
                return _this.state.oldSandboxId
                    ? null
                    : _this.props.children || 'Loading Sandbox...';
            }))));
    };
    return SandboxEmbed;
}(React.PureComponent));
exports["default"] = SandboxEmbed;
